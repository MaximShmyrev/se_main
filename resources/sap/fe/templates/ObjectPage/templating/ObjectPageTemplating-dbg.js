sap.ui.define(["sap/fe/core/helpers/BindingExpression", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/CommonUtils", "sap/fe/macros/field/FieldTemplating", "sap/fe/core/templating/EntitySetHelper"], function (BindingExpression, BindingHelper, CommonUtils, FieldTemplating, EntitySetHelper) {
  "use strict";

  var _exports = {};
  var isStickySessionSupported = EntitySetHelper.isStickySessionSupported;
  var formatValueRecursively = FieldTemplating.formatValueRecursively;
  var addTextArrangementToBindingExpression = FieldTemplating.addTextArrangementToBindingExpression;
  var Draft = BindingHelper.Draft;
  var UI = BindingHelper.UI;
  var compileBinding = BindingExpression.compileBinding;
  var annotationExpression = BindingExpression.annotationExpression;
  var concat = BindingExpression.concat;
  var isEmpty = BindingExpression.isEmpty;
  var ifElse = BindingExpression.ifElse;
  var and = BindingExpression.and;

  // Formatters for the Object Page
  //```mermaid
  // graph TD
  // A[Object Page Title] -->|Get DataField Value| C{Evaluate Create Mode}
  // C -->|In Create Mode| D{Is DataField Value empty}
  // D -->|Yes| F{Is there a TypeName}
  // F -->|Yes| G[Is there an custom title]
  // G -->|Yes| G1[Show the custom title + 'TypeName']
  // G -->|No| G2[Display the default title 'New + TypeName']
  // F -->|No| H[Is there a custom title]
  // H -->|Yes| I[Show the custom title]
  // H -->|No| J[Show the default 'Unamned Object']
  // D -->|No| E
  // C -->|Not in create mode| E[Show DataField Value]
  // ```

  /**
   * Compute the title for the object page.
   *
   * @param oHeaderInfo the @UI.HeaderInfo annotation content
   * @param oViewData the view data object we're currently on
   * @param fullContextPath the full context path used to reach that object page
   * @returns the binding expression for the object page title
   */
  var getExpressionForTitle = function (oHeaderInfo, oViewData, fullContextPath) {
    var _ref;

    var titleNoHeaderInfo = CommonUtils.getTranslatedText("T_ANNOTATION_HELPER_DEFAULT_OBJECT_PAGE_HEADER_TITLE_NO_HEADER_INFO", oViewData.resourceBundle, null, oViewData.entitySet);
    var titleWithHeaderInfo = CommonUtils.getTranslatedText("T_ANNOTATION_HELPER_DEFAULT_OBJECT_PAGE_HEADER_TITLE", oViewData.resourceBundle, null, oViewData.entitySet);
    var titleValueExpression = formatValueRecursively(addTextArrangementToBindingExpression(annotationExpression((_ref = oHeaderInfo === null || oHeaderInfo === void 0 ? void 0 : oHeaderInfo.Title) === null || _ref === void 0 ? void 0 : _ref.Value), fullContextPath), fullContextPath);
    return compileBinding(ifElse( // If Create Mode && Empty expression
    and(UI.IsCreateMode, titleValueExpression && isEmpty(titleValueExpression)), // If there is a TypeName defined, show the default title 'New + TypeName', otherwise show the custom title or the default 'Unnamed object'
    (oHeaderInfo === null || oHeaderInfo === void 0 ? void 0 : oHeaderInfo.TypeName) ? concat(titleWithHeaderInfo, ": ", annotationExpression(oHeaderInfo.TypeName)) : titleNoHeaderInfo, // Otherwise show the default expression
    titleValueExpression));
  };
  /**
   * Retrieves the expression for the description of an object page.
   *
   * @param oHeaderInfo the @UI.HeaderInfo annotation content
   * @param fullContextPath the full context path used to reach that object page
   * @returns the binding string to bind
   */


  _exports.getExpressionForTitle = getExpressionForTitle;

  var getExpressionForDescription = function (oHeaderInfo, fullContextPath) {
    var _ref2;

    return compileBinding(formatValueRecursively(addTextArrangementToBindingExpression(annotationExpression((_ref2 = oHeaderInfo === null || oHeaderInfo === void 0 ? void 0 : oHeaderInfo.Description) === null || _ref2 === void 0 ? void 0 : _ref2.Value), fullContextPath), fullContextPath));
  };
  /**
   * Return the expression for the save button.
   *
   * @param oViewData the current view data
   * @param fullContextPath the path used up until here
   * @returns the binding expression that shows the right save button text
   */


  _exports.getExpressionForDescription = getExpressionForDescription;

  var getExpressionForSaveButton = function (oViewData, fullContextPath) {
    var saveButtonText = CommonUtils.getTranslatedText("T_OP_OBJECT_PAGE_SAVE", oViewData.resourceBundle);
    var createButtonText = CommonUtils.getTranslatedText("T_OP_OBJECT_PAGE_CREATE", oViewData.resourceBundle);
    var saveExpression;

    if (isStickySessionSupported(fullContextPath.startingEntitySet)) {
      // If we're in sticky mode AND the ui is in create mode, show Create, else show Save
      saveExpression = ifElse(UI.IsCreateModeSticky, createButtonText, saveButtonText);
    } else {
      // If we're in draft AND the draft is a new object (!IsActiveEntity && !HasActiveEntity), show create, else show save
      saveExpression = ifElse(Draft.IsNewObject, createButtonText, saveButtonText);
    }

    return compileBinding(saveExpression);
  };

  _exports.getExpressionForSaveButton = getExpressionForSaveButton;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,