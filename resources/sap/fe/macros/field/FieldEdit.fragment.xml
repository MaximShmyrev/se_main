<core:FragmentDefinition
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
	xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	xmlns="sap.m"
	xmlns:core="sap.ui.core"
	template:require="{
							MODEL: 'sap/ui/model/odata/v4/AnnotationHelper',
							COMMON: 'sap/fe/macros/CommonHelper',
							FIELD: 'sap/fe/macros/field/FieldHelper',
							ID: 'sap/fe/core/helpers/StableIdHelper',
							UI: 'sap/fe/core/templating/UIFormatters'
						 }"
>

	<template:if test="{= (${property>$Path/$Type} === 'Edm.String') &amp;&amp;	${property>$Path@com.sap.vocabularies.UI.v1.MultiLineText} }">
		<template:then>
			<TextArea
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				unittest:id="MacroInput"
				log:sourcePath="{this>dataSourcePath}"
				id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined) }"
				value="{property>@@MODEL.format}"
				placeholder="{property>$Path@com.sap.vocabularies.UI.v1.Placeholder@@MODEL.value}"
				required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
				rows="{this>formatOptions/textLinesEdit}"
				width="100%"
				editable="{= UI.getEditableExpression(${property>@@UI.getConverterContext})}"
				enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
				change="{= ${this>onChange} || 'FieldRuntime.handleChange($controller, $event)' }"
				fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
				ariaLabelledBy="{this>ariaLabelledBy}"
			/>
		</template:then>
		<template:elseif test="{= FIELD.isDateDataType(${property>$Path/$Type}) }">
			<DatePicker
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				unittest:id="MacroInput"
				log:sourcePath="{this>dataSourcePath}"
				id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined) }"
				value="{dataField>Value@@MODEL.value}"
				width="100%"
				editable="{= UI.getEditableExpression(${property>@@UI.getConverterContext})}"
				enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
				required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
				change="{= ${this>onChange} || 'FieldRuntime.handleChange($controller, $event)' }"
				fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
				textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}], formatter:'FIELD.getTypeAlignment'}"
				validateFieldGroup="FieldRuntime.handleSideEffect($event)"
				ariaLabelledBy="{this>ariaLabelledBy}"
			/>
		</template:elseif>
		<template:elseif test="{= FIELD.isTimeDataType(${property>$Path/$Type}) }">
			<TimePicker
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				unittest:id="MacroInput"
				log:sourcePath="{this>dataSourcePath}"
				id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined) }"
				value="{dataField>Value@@MODEL.value}"
				width="100%"
				editable="{= UI.getEditableExpression(${property>@@UI.getConverterContext})}"
				enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
				required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
				change="{= ${this>onChange} || 'FieldRuntime.handleChange($controller, $event)' }"
				fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
				textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}], formatter:'FIELD.getTypeAlignment'}"
				validateFieldGroup="FieldRuntime.handleSideEffect($event)"
				ariaLabelledBy="{this>ariaLabelledBy}"
			/>
		</template:elseif>
		<template:elseif test="{= ${property>$Path/$Type} === 'Edm.Boolean'}">
			<CheckBox
				unittest:id="MacroInput"
				log:sourcePath="{this>dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined) }"
				selected="{dataField>Value@@MODEL.value}"
				editable="{= UI.getEditableExpression(${property>@@UI.getConverterContext})}"
				enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
				select="{= ${this>onChange} || 'FieldRuntime.handleChange($controller, $event)' }"
				fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
				validateFieldGroup="FieldRuntime.handleSideEffect($event)"
				ariaLabelledBy="{this>ariaLabelledBy}"
			/>
		</template:elseif>
		<template:elseif test="{=  ${property>$Path@Org.OData.Measures.V1.Unit} || ${property>$Path@Org.OData.Measures.V1.ISOCurrency}}">
			<template:if test="{= FIELD.hasStaticUnitOrCurrency(${property>$Path@})}">
				<template:then>
					<Input
						log:sourcePath="{this>dataSourcePath}"
						core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
						id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined) }"
						value="{parts:[{path:'dataField>Value'}], formatter: 'FIELD.formatValueWithoutUnit'}"
						width="100%"
						fieldWidth="70%"
						description="{= FIELD.getStaticUnitOrCurrency(${property>$Path@})}"
						editable="{= UI.getEditableExpression(${property>@@UI.getConverterContext})}"
						enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
						required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
						change="{= ${this>onChange} || 'FieldRuntime.handleChange($controller, $event)' }"
						textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}], formatter:'FIELD.getTypeAlignment'}"
						fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
						validateFieldGroup="FieldRuntime.handleSideEffect($event)"
					/>
				</template:then>
				<template:else>
					<template:with path="property>$Path@" helper="FIELD.getUnitOrCurrency" var="unit">

						<Input
							log:sourcePath="{this>dataSourcePath}"
							core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
							id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined) }"
							value="{parts:[{path:'dataField>Value'}], formatter: 'FIELD.formatValueWithoutUnit'}"
							width="{= UI.ifUnitEditable(${property>@@UI.getConverterContext},'70%','100%')}"
							fieldWidth="{= UI.ifUnitEditable(${property>@@UI.getConverterContext}, '100%' , '70%')}"
							description="{parts:[{path:'property>@@UI.getConverterContext'}, {value:''}, {path:'unit>@@MODEL.value'}], formatter:'UI.ifUnitEditable'}"
							editable="{= UI.getEditableExpression(${property>@@UI.getConverterContext})}"
							enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
							required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
							change="{= ${this>onChange} || 'FieldRuntime.handleChange($controller, $event)' }"
							textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}], formatter:'FIELD.getTypeAlignment'}"
							fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
							validateFieldGroup="FieldRuntime.handleSideEffect($event)"
						/>
						<Input
							log:sourcePath="{this>dataSourcePath}"
							core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
							id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-unitEdit']) : undefined) }"
							value="{unit>@@MODEL.value}"
							width="30%"
							editable="true"
							enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
							change="{= ${this>onChange} || 'FieldRuntime.handleChange($controller, $event)' }"
							textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}], formatter:'FIELD.getTypeAlignment'}"
							fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
							validateFieldGroup="FieldRuntime.handleSideEffect($event)"
							visible="{= UI.ifUnitEditable(${property>@@UI.getConverterContext},'true','false')}"
						/>
					</template:with>
				</template:else>
			</template:if>
		</template:elseif>
		<template:else>
			<Input
				unittest:id="MacroInput"
				log:sourcePath="{this>dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined) }"
				value="{dataField>Value@@MODEL.format}"
				placeholder="{property>$Path@com.sap.vocabularies.UI.v1.Placeholder@@MODEL.value}"
				width="100%"
				editable="{= UI.getEditableExpression(${property>@@UI.getConverterContext})}"
				enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
				required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
				change="{= ${this>onChange} || 'FieldRuntime.handleChange($controller, $event)' }"
				fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
				textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}], formatter:'FIELD.getTypeAlignment'}"
				validateFieldGroup="FieldRuntime.handleSideEffect($event)"
				ariaLabelledBy="{this>ariaLabelledBy}"
			/>
		</template:else>
	</template:if>

</core:FragmentDefinition>
