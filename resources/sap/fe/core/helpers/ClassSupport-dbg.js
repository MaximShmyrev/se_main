sap.ui.define(["sap/base/util/ObjectPath", "sap/ui/core/ElementMetadata"], function (ObjectPath, ElementMetadata) {
  "use strict";

  var _exports = {};

  function Override(sTarget) {
    return function (target, propertyKey) {
      if (!target.override) {
        target.override = {};
      }

      var currentTarget = target.override;

      if (sTarget) {
        if (!currentTarget.extension) {
          currentTarget.extension = {};
        }

        if (!currentTarget.extension[sTarget]) {
          currentTarget.extension[sTarget] = {};
        }

        currentTarget = currentTarget.extension[sTarget];
      }

      currentTarget[propertyKey] = target[propertyKey];
    };
  }

  _exports.Override = Override;

  function Extensible(oOverrideExecution) {
    return function (target, propertyKey) {
      if (!target.metadata) {
        target.metadata = {
          methods: {}
        };
      }

      if (!target.metadata.methods[propertyKey]) {
        target.metadata.methods[propertyKey] = {};
      }

      target.metadata.methods[propertyKey].overrideExecution = oOverrideExecution;
    };
  }

  _exports.Extensible = Extensible;

  function Public(target, propertyKey) {
    if (!target.metadata) {
      target.metadata = {
        methods: {}
      };
    }

    if (!target.metadata.methods[propertyKey]) {
      target.metadata.methods[propertyKey] = {};
    }

    target.metadata.methods[propertyKey].public = true;
  }

  _exports.Public = Public;

  function Private(target, propertyKey) {
    if (!target.metadata) {
      target.metadata = {
        methods: {}
      };
    }

    if (!target.metadata.methods[propertyKey]) {
      target.metadata.methods[propertyKey] = {};
    }

    target.metadata.methods[propertyKey].public = false;
  }

  _exports.Private = Private;

  function Final(target, propertyKey) {
    if (!target.metadata) {
      target.metadata = {
        methods: {}
      };
    }

    if (!target.metadata.methods[propertyKey]) {
      target.metadata.methods[propertyKey] = {};
    }

    target.metadata.methods[propertyKey].final = true;
  }

  _exports.Final = Final;

  function UI5Class(sTarget, metadataClass) {
    return function (constructor) {
      describe(constructor, sTarget, constructor.prototype, metadataClass);
    };
  }

  _exports.UI5Class = UI5Class;

  function describe(clazz, name, obj, metadataClass) {
    obj = obj || {};
    obj.metadata = obj.metadata || {};
    obj.override = obj.override;
    obj.constructor = clazz;
    obj.metadata.baseType = Object.getPrototypeOf(clazz.prototype).getMetadata().getName();
    var metadata;

    if (metadataClass) {
      metadata = new metadataClass(name, obj);
    } else {
      metadata = new ElementMetadata(name, obj);
    }

    clazz.getMetadata = clazz.prototype.getMetadata = function () {
      return metadata;
    };

    ObjectPath.set(name, clazz);
  }

  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,