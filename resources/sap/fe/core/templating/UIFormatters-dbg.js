sap.ui.define(["sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingExpression", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/DataModelPathHelper"], function (MetaModelConverter, BindingExpression, BindingHelper, PropertyHelper, DataModelPathHelper) {
  "use strict";

  var _exports = {};
  var isPathUpdatable = DataModelPathHelper.isPathUpdatable;
  var isReadOnlyExpression = PropertyHelper.isReadOnlyExpression;
  var isPathExpression = PropertyHelper.isPathExpression;
  var isNonEditableExpression = PropertyHelper.isNonEditableExpression;
  var isKey = PropertyHelper.isKey;
  var isImmutable = PropertyHelper.isImmutable;
  var isDisabledExpression = PropertyHelper.isDisabledExpression;
  var isComputed = PropertyHelper.isComputed;
  var hasValueHelp = PropertyHelper.hasValueHelp;
  var hasSemanticObject = PropertyHelper.hasSemanticObject;
  var getAssociatedCurrencyProperty = PropertyHelper.getAssociatedCurrencyProperty;
  var getAssociatedUnitProperty = PropertyHelper.getAssociatedUnitProperty;
  var UI = BindingHelper.UI;
  var or = BindingExpression.or;
  var not = BindingExpression.not;
  var isConstant = BindingExpression.isConstant;
  var ifElse = BindingExpression.ifElse;
  var equal = BindingExpression.equal;
  var compileBinding = BindingExpression.compileBinding;
  var and = BindingExpression.and;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;

  /**
   * Create the expression to generate an "editable" boolean value.
   *
   * @param {PropertyPath} oPropertyPath the input property
   * @param {DataModelObjectPath} oDataModelObjectPath the path to this property object
   * @param {boolean} bAsObject whether or not this should be returned as an object or a binding string
   * @returns {string} the binding string
   */
  var getEditableExpression = function (oPropertyPath, oDataModelObjectPath) {
    var bAsObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return compileBinding(false);
    }

    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath; // Editability depends on the field control expression
    // If the Field control is statically in ReadOnly or Inapplicable (disabled) -> not editable
    // If the property is a key -> not editable except in creation if not computed
    // If the property is computed -> not editable
    // If the property is not updatable -> not editable
    // If the property is immutable -> not editable except in creation
    // If the property has a SemanticObject and no ValueList defined -> not editable
    // If the Field control is a path resolving to ReadOnly or Inapplicable (disabled) (<= 1) -> not editable
    // Else, to be editable you need
    // immutable and key while in the creation row
    // ui/isEditable

    var isPathUpdatableExpression = isPathUpdatable(oDataModelObjectPath, oPropertyPath);
    var editableExpression = ifElse(or(not(isPathUpdatableExpression), isComputed(oProperty), isKey(oProperty), isImmutable(oProperty), hasSemanticObject(oProperty) && !hasValueHelp(oProperty), isNonEditableExpression(oProperty)), ifElse((isImmutable(oProperty) || isKey(oProperty)) && !isComputed(oProperty), and(isPathUpdatableExpression, UI.IsTransientBinding), false), UI.IsEditable);

    if (bAsObject) {
      return editableExpression;
    }

    return compileBinding(editableExpression);
  };
  /**
   * Create the expression to generate an "enabled" boolean value.
   *
   * @param {PropertyPath} oPropertyPath the input property
   * @param {boolean} bAsObject whether or not this should be returned as an object or a binding string
   * @returns {string} the binding string
   */


  _exports.getEditableExpression = getEditableExpression;

  var getEnabledExpression = function (oPropertyPath) {
    var bAsObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return compileBinding(true);
    }

    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath; // Enablement depends on the field control expression
    // If the Field control is statically in Inapplicable (disabled) -> not enabled

    var enabledExpression = ifElse(isDisabledExpression(oProperty), false, true);

    if (bAsObject) {
      return enabledExpression;
    }

    return compileBinding(enabledExpression);
  };
  /**
   * Create the expression to generate an "editMode" enum value.
   * @param {PropertyPath} oPropertyPath the input property
   * @param {DataModelObjectPath} oDataModelObjectPath the list of involved data model object to reach that property
   * @param {boolean} bAsObject return this as an expression
   * @returns {BindingExpression<string> | ExpressionOrPrimitive<string>} the binding string or part
   */


  _exports.getEnabledExpression = getEnabledExpression;

  var getEditMode = function (oPropertyPath, oDataModelObjectPath) {
    var bAsObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return "Display";
    }

    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath; // if the property is not enabled => Disabled
    // if the property is enabled && not editable => ReadOnly
    // if the property is enabled && editable => Editable
    // If there is an associated unit, and it has a field control also use consider the following
    // if the unit field control is readonly -> EditableReadOnly
    // otherwise -> Editable

    var editableExpression = getEditableExpression(oPropertyPath, oDataModelObjectPath, true);
    var enabledExpression = getEnabledExpression(oPropertyPath, true);
    var unitProperty = getAssociatedCurrencyProperty(oProperty) || getAssociatedUnitProperty(oProperty);
    var resultExpression = "Editable";

    if (unitProperty) {
      resultExpression = ifElse(or(isReadOnlyExpression(unitProperty), isComputed(unitProperty)), "EditableReadOnly", "Editable");
    }

    var readOnlyExpression = isReadOnlyExpression(oProperty); // if the property is from a non-updatable entity => Read only mode, previously calculated edit Mode is ignored
    // if the property is from an updatable entity => previously calculated edit Mode expression

    var editModeExpression = ifElse(enabledExpression, ifElse(editableExpression, resultExpression, ifElse(and(!isConstant(readOnlyExpression) && readOnlyExpression, UI.IsEditable), "ReadOnly", "Display")), ifElse(UI.IsEditable, "Disabled", "Display"));

    if (bAsObject) {
      return editModeExpression;
    }

    return compileBinding(editModeExpression);
  };

  _exports.getEditMode = getEditMode;

  var ifUnitEditable = function (oPropertyPath, sEditableValue, sNonEditableValue) {
    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return "Display";
    }

    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    var unitProperty = getAssociatedCurrencyProperty(oProperty) || getAssociatedUnitProperty(oProperty);

    if (!unitProperty) {
      return compileBinding(sNonEditableValue);
    }

    var editableExpression = and(not(isReadOnlyExpression(unitProperty)), not(isComputed(unitProperty)));
    return compileBinding(ifElse(editableExpression, sEditableValue, sNonEditableValue));
  };

  _exports.ifUnitEditable = ifUnitEditable;

  var getDisplayMode = function (oPropertyPath, oDataModelObjectPath) {
    var _oProperty$annotation, _oProperty$annotation2, _oTextAnnotation$anno, _oTextAnnotation$anno2, _oEntitySet$entityTyp, _oEntitySet$entityTyp2, _oEntitySet$entityTyp3;

    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return "Value";
    }

    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    var oEntitySet = oDataModelObjectPath.targetEntitySet;
    var oTextAnnotation = (_oProperty$annotation = oProperty.annotations) === null || _oProperty$annotation === void 0 ? void 0 : (_oProperty$annotation2 = _oProperty$annotation.Common) === null || _oProperty$annotation2 === void 0 ? void 0 : _oProperty$annotation2.Text;
    var oTextArrangementAnnotation = typeof oTextAnnotation !== "string" && (oTextAnnotation === null || oTextAnnotation === void 0 ? void 0 : (_oTextAnnotation$anno = oTextAnnotation.annotations) === null || _oTextAnnotation$anno === void 0 ? void 0 : (_oTextAnnotation$anno2 = _oTextAnnotation$anno.UI) === null || _oTextAnnotation$anno2 === void 0 ? void 0 : _oTextAnnotation$anno2.TextArrangement) || (oEntitySet === null || oEntitySet === void 0 ? void 0 : (_oEntitySet$entityTyp = oEntitySet.entityType) === null || _oEntitySet$entityTyp === void 0 ? void 0 : (_oEntitySet$entityTyp2 = _oEntitySet$entityTyp.annotations) === null || _oEntitySet$entityTyp2 === void 0 ? void 0 : (_oEntitySet$entityTyp3 = _oEntitySet$entityTyp2.UI) === null || _oEntitySet$entityTyp3 === void 0 ? void 0 : _oEntitySet$entityTyp3.TextArrangement);
    var sDisplayValue = oTextAnnotation ? "DescriptionValue" : "Value";

    if (oTextAnnotation && oTextArrangementAnnotation) {
      if (oTextArrangementAnnotation === "UI.TextArrangementType/TextOnly") {
        sDisplayValue = "Description";
      } else if (oTextArrangementAnnotation === "UI.TextArrangementType/TextLast") {
        sDisplayValue = "ValueDescription";
      } else if (oTextArrangementAnnotation === "UI.TextArrangementType/TextSeparate") {
        sDisplayValue = "Value";
      } else {
        //Default should be TextFirst if there is a Text annotation and neither TextOnly nor TextLast are set
        sDisplayValue = "DescriptionValue";
      }
    }

    return sDisplayValue;
  };

  _exports.getDisplayMode = getDisplayMode;

  var getFieldDisplay = function (oPropertyPath, sTargetDisplayMode, oComputedEditMode) {
    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    return hasValueHelp(oProperty) ? compileBinding(sTargetDisplayMode) : compileBinding(ifElse(equal(oComputedEditMode, "Editable"), "Value", sTargetDisplayMode));
  };

  _exports.getFieldDisplay = getFieldDisplay;

  var getAlignmentExpression = function (oComputedEditMode) {
    var sAlignDisplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Begin";
    var sAlignEdit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Begin";
    return compileBinding(ifElse(equal(oComputedEditMode, "Display"), sAlignDisplay, sAlignEdit));
  };
  /**
   * Formatter helper to retrieve the converterContext from the metamodel context.
   *
   * @param {Context} oContext the original metamodel context
   * @param {ComputedAnnotationInterface} oInterface the current templating context
   * @returns {object} the converter context representing that object
   */


  _exports.getAlignmentExpression = getAlignmentExpression;

  var getConverterContext = function (oContext, oInterface) {
    if (oInterface && oInterface.context) {
      return convertMetaModelContext(oInterface.context);
    }

    return null;
  };

  getConverterContext.requiresIContext = true;
  /**
   * Formatter helper to retrieve the involved data model object from the metamodel context.
   *
   * @param {Context} oContext the original metamodel context
   * @param {ComputedAnnotationInterface} oInterface the current templating context
   * @returns {object[]} an array of entityset and navproperty involved to get to a specific object in the metamodel
   */

  _exports.getConverterContext = getConverterContext;

  var getDataModelObjectPath = function (oContext, oInterface) {
    if (oInterface && oInterface.context) {
      return getInvolvedDataModelObjects(oInterface.context);
    }

    return null;
  };

  getDataModelObjectPath.requiresIContext = true;
  /**
   * Retrieves the expressionBinding created out of a binding expression.
   *
   * @param {Expression<any>} expression the expression to compile
   * @returns {BindingExpression<string>} the expression binding string
   */

  _exports.getDataModelObjectPath = getDataModelObjectPath;

  var getExpressionBinding = function (expression) {
    return compileBinding(expression);
  };

  _exports.getExpressionBinding = getExpressionBinding;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,