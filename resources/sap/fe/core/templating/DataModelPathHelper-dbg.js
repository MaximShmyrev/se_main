sap.ui.define(["sap/fe/core/helpers/BindingExpression", "sap/fe/core/templating/PropertyHelper"], function (BindingExpression, PropertyHelper) {
  "use strict";

  var _exports = {};
  var isPathExpression = PropertyHelper.isPathExpression;
  var equal = BindingExpression.equal;
  var constant = BindingExpression.constant;
  var annotationExpression = BindingExpression.annotationExpression;

  var getPathRelativeLocation = function (contextPath) {
    var visitedNavProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (!contextPath) {
      return visitedNavProps.map(function (navProp) {
        return navProp.name;
      });
    } else {
      if (visitedNavProps.length >= contextPath.navigationProperties.length) {
        var remainingNavProps = [];
        contextPath.navigationProperties.forEach(function (navProp, navIndex) {
          if (visitedNavProps[navIndex] !== navProp) {
            remainingNavProps.push(visitedNavProps[navIndex]);
          }
        });
        remainingNavProps = remainingNavProps.concat(visitedNavProps.slice(contextPath.navigationProperties.length));
        return remainingNavProps.map(function (navProp) {
          return navProp.name;
        });
      } else {
        var extraNavProp = [];
        visitedNavProps.forEach(function (navProp, navIndex) {
          if (contextPath.navigationProperties[navIndex] !== navProp) {
            extraNavProp.push(visitedNavProps[navIndex]);
          }
        });
        extraNavProp = extraNavProp.concat(contextPath.navigationProperties.slice(visitedNavProps.length));
        return extraNavProp.map(function (navProp) {
          return navProp.partner;
        });
      }
    }
  };

  _exports.getPathRelativeLocation = getPathRelativeLocation;

  var enhanceDataModelPath = function (dataModelObjectPath, propertyPath) {
    var sPropertyPath = "";

    if (isPathExpression(propertyPath) && propertyPath.path) {
      sPropertyPath = propertyPath.path;
    } else if (typeof propertyPath === "string") {
      sPropertyPath = propertyPath;
    }

    var oTarget;

    if (isPathExpression(propertyPath)) {
      oTarget = propertyPath.$target;
    } else if (dataModelObjectPath.targetEntityType) {
      oTarget = dataModelObjectPath.targetEntityType.resolvePath(sPropertyPath);
    } else {
      oTarget = dataModelObjectPath.targetObject;
    }

    var aPathSplit = sPropertyPath.split("/");
    var currentEntitySet = dataModelObjectPath.targetEntitySet;
    var currentEntityType = dataModelObjectPath.targetEntityType;
    var navigationProperties = dataModelObjectPath.navigationProperties.concat(); // Process only if we have to go through navigation properties

    aPathSplit.reduce(function (reducedEntityType, pathPart) {
      if (!reducedEntityType) {
        return undefined;
      }

      var potentialNavProp = reducedEntityType.navigationProperties.find(function (navProp) {
        return navProp.name === pathPart;
      });

      if (potentialNavProp) {
        navigationProperties.push(potentialNavProp);
        currentEntityType = potentialNavProp.targetType;

        if (currentEntitySet && currentEntitySet.navigationPropertyBinding.hasOwnProperty(pathPart)) {
          currentEntitySet = currentEntitySet.navigationPropertyBinding[pathPart];
        }

        return currentEntityType;
      }

      return undefined;
    }, dataModelObjectPath.targetEntityType);
    return {
      startingEntitySet: dataModelObjectPath.startingEntitySet,
      navigationProperties: navigationProperties,
      contextLocation: dataModelObjectPath.contextLocation,
      targetEntitySet: currentEntitySet,
      targetEntityType: currentEntityType,
      targetObject: oTarget
    };
  };

  _exports.enhanceDataModelPath = enhanceDataModelPath;

  var getTargetObjectPath = function (dataModelObjectPath) {
    var bRelative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var path = "";

    if (!bRelative) {
      path += "/".concat(dataModelObjectPath.startingEntitySet.name);
    }

    if (dataModelObjectPath.navigationProperties.length > 0) {
      if (path.length > 0) {
        path += "/";
      }

      path += dataModelObjectPath.navigationProperties.map(function (navProp) {
        return navProp.name;
      }).join("/");
    }

    if (dataModelObjectPath.targetObject && dataModelObjectPath.targetObject.name && dataModelObjectPath.targetObject._type !== "NavigationProperty" && dataModelObjectPath.targetObject !== dataModelObjectPath.startingEntitySet) {
      if (!path.endsWith("/")) {
        path += "/";
      }

      path += "".concat(dataModelObjectPath.targetObject.name);
    } else if (dataModelObjectPath.targetObject && dataModelObjectPath.targetObject.hasOwnProperty("term")) {
      if (path.length > 0 && !path.endsWith("/")) {
        path += "/";
      }

      path += "@".concat(dataModelObjectPath.targetObject.term);
    }

    return path;
  };

  _exports.getTargetObjectPath = getTargetObjectPath;

  var getContextRelativeTargetObjectPath = function (dataModelObjectPath) {
    var path = getPathRelativeLocation(dataModelObjectPath.contextLocation, dataModelObjectPath.navigationProperties).join("/");

    if (dataModelObjectPath.targetObject && dataModelObjectPath.targetObject.name && dataModelObjectPath.targetObject._type !== "NavigationProperty" && dataModelObjectPath.targetObject !== dataModelObjectPath.startingEntitySet) {
      if (!path.endsWith("/")) {
        path += "/";
      }

      path += "".concat(dataModelObjectPath.targetObject.name);
    } else if (dataModelObjectPath.targetObject && dataModelObjectPath.targetObject.hasOwnProperty("term")) {
      if (path.length > 0 && !path.endsWith("/")) {
        path += "/";
      }

      path += "@".concat(dataModelObjectPath.targetObject.term);
    }

    return path;
  };

  _exports.getContextRelativeTargetObjectPath = getContextRelativeTargetObjectPath;

  var isPathUpdatable = function (dataModelObjectPath, propertyPath) {
    return checkOnPath(dataModelObjectPath, function (annotationObject) {
      var _annotationObject$Upd;

      return annotationObject === null || annotationObject === void 0 ? void 0 : (_annotationObject$Upd = annotationObject.UpdateRestrictions) === null || _annotationObject$Upd === void 0 ? void 0 : _annotationObject$Upd.Updatable;
    }, propertyPath);
  };

  _exports.isPathUpdatable = isPathUpdatable;

  var isPathDeletable = function (dataModelObjectPath, propertyPath, bTableCase) {
    return checkOnPath(dataModelObjectPath, function (annotationObject) {
      var _annotationObject$Del;

      return annotationObject === null || annotationObject === void 0 ? void 0 : (_annotationObject$Del = annotationObject.DeleteRestrictions) === null || _annotationObject$Del === void 0 ? void 0 : _annotationObject$Del.Deletable;
    }, propertyPath, bTableCase);
  };

  _exports.isPathDeletable = isPathDeletable;

  var isPathInsertable = function (dataModelObjectPath, propertyPath) {
    return checkOnPath(dataModelObjectPath, function (annotationObject) {
      var _annotationObject$Ins;

      return annotationObject === null || annotationObject === void 0 ? void 0 : (_annotationObject$Ins = annotationObject.InsertRestrictions) === null || _annotationObject$Ins === void 0 ? void 0 : _annotationObject$Ins.Insertable;
    }, propertyPath);
  };

  _exports.isPathInsertable = isPathInsertable;

  var checkFilterExpressionRestrictions = function (dataModelObjectPath, allowedExpression) {
    return checkOnPath(dataModelObjectPath, function (annotationObject) {
      var _annotationObject$Fil;

      var filterExpressionRestrictions = (annotationObject === null || annotationObject === void 0 ? void 0 : (_annotationObject$Fil = annotationObject.FilterRestrictions) === null || _annotationObject$Fil === void 0 ? void 0 : _annotationObject$Fil.FilterExpressionRestrictions) || [];
      var currentObjectRestriction = filterExpressionRestrictions.find(function (restriction) {
        return restriction.Property.$target === dataModelObjectPath.targetObject;
      });

      if (currentObjectRestriction) {
        return allowedExpression.indexOf(currentObjectRestriction === null || currentObjectRestriction === void 0 ? void 0 : currentObjectRestriction.AllowedExpressions) !== -1;
      } else {
        return false;
      }
    });
  };

  _exports.checkFilterExpressionRestrictions = checkFilterExpressionRestrictions;

  var checkOnPath = function (dataModelObjectPath, checkFunction, propertyPath, bTableCase) {
    var _targetEntitySet, _targetEntitySet$anno;

    if (!dataModelObjectPath || !dataModelObjectPath.startingEntitySet) {
      return constant(true);
    }

    dataModelObjectPath = enhanceDataModelPath(dataModelObjectPath, propertyPath);
    var currentEntitySet = dataModelObjectPath.startingEntitySet;
    var parentEntitySet = null;
    var visitedNavigationPropsName = [];
    var allVisitedNavigationProps = [];
    var targetEntitySet = currentEntitySet;
    var resetVisitedNavProps = false;
    dataModelObjectPath.navigationProperties.forEach(function (navigationProperty) {
      if (resetVisitedNavProps) {
        visitedNavigationPropsName = [];
      }

      visitedNavigationPropsName.push(navigationProperty.name);
      allVisitedNavigationProps.push(navigationProperty);

      if (!navigationProperty.containsTarget) {
        // We should have a navigationPropertyBinding associated with the path so far which can consist of ([ContainmentNavProp]/)*[NavProp]
        var _fullNavigationPath = visitedNavigationPropsName.join("/");

        if (currentEntitySet && currentEntitySet.navigationPropertyBinding.hasOwnProperty(_fullNavigationPath)) {
          parentEntitySet = currentEntitySet;
          currentEntitySet = currentEntitySet.navigationPropertyBinding[_fullNavigationPath];
          targetEntitySet = currentEntitySet; // If we reached a navigation property with a navigationpropertybinding, we need to reset the visited path on the next iteration (if there is one)

          resetVisitedNavProps = true;
        } else {
          // We really should not end up here but at least let's try to avoid incorrect behavior
          parentEntitySet = currentEntitySet;
          currentEntitySet = null;
          resetVisitedNavProps = true;
        }
      } else {
        parentEntitySet = currentEntitySet;
        targetEntitySet = null;
      }
    }); // At this point we have navigated down all the nav prop and we should have
    // The target entityset pointing to either null (in case of containment navprop a last part), or the actual target (non containment as target)
    // The parent entitySet pointing to the previous entityset used in the path
    // VisitedNavigationPath should contain the path up to this property
    // Restrictions should then be evaluated as ParentEntitySet.NavRestrictions[NavpropertyPath] || TargetEntitySet.Restrictions

    var fullNavigationPath = visitedNavigationPropsName.join("/");
    var restrictions;

    if (parentEntitySet !== null) {
      var _parentEntitySet$anno, _parentEntitySet$anno2, _parentEntitySet$anno3;

      var _parentEntitySet = parentEntitySet;
      (_parentEntitySet$anno = _parentEntitySet.annotations) === null || _parentEntitySet$anno === void 0 ? void 0 : (_parentEntitySet$anno2 = _parentEntitySet$anno.Capabilities) === null || _parentEntitySet$anno2 === void 0 ? void 0 : (_parentEntitySet$anno3 = _parentEntitySet$anno2.NavigationRestrictions) === null || _parentEntitySet$anno3 === void 0 ? void 0 : _parentEntitySet$anno3.RestrictedProperties.forEach(function (restrictedNavProp) {
        var _restrictedNavProp$Na;

        if (((_restrictedNavProp$Na = restrictedNavProp.NavigationProperty) === null || _restrictedNavProp$Na === void 0 ? void 0 : _restrictedNavProp$Na.type) === "NavigationPropertyPath") {
          var _restrictionDefinition = checkFunction(restrictedNavProp);

          if (fullNavigationPath === restrictedNavProp.NavigationProperty.value && _restrictionDefinition !== undefined) {
            var _dataModelObjectPath;

            restrictions = equal(annotationExpression(_restrictionDefinition, getPathRelativeLocation((_dataModelObjectPath = dataModelObjectPath) === null || _dataModelObjectPath === void 0 ? void 0 : _dataModelObjectPath.contextLocation, allVisitedNavigationProps.slice(0, -1))), true);
          }
        }
      });
    }

    var targetRestrictions;
    var restrictionDefinition = checkFunction((_targetEntitySet = targetEntitySet) === null || _targetEntitySet === void 0 ? void 0 : (_targetEntitySet$anno = _targetEntitySet.annotations) === null || _targetEntitySet$anno === void 0 ? void 0 : _targetEntitySet$anno.Capabilities);

    if (restrictionDefinition !== undefined) {
      targetRestrictions = equal(annotationExpression(restrictionDefinition, getPathRelativeLocation(dataModelObjectPath.contextLocation, allVisitedNavigationProps)), true);
    } //object page table case in path based scenario's fallback to exisiting approach


    if (bTableCase && !restrictions && (restrictionDefinition === null || restrictionDefinition === void 0 ? void 0 : restrictionDefinition.path)) {
      var oResult = {
        "currentEntityRestriction": targetRestrictions
      };
      return oResult;
    }

    return restrictions || targetRestrictions || constant(true);
  };

  _exports.checkOnPath = checkOnPath;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,