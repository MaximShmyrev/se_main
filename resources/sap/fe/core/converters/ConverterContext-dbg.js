sap.ui.define(["sap/fe/core/converters/ManifestSettings", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/templating/DataModelPathHelper"], function (ManifestSettings, MetaModelConverter, DataModelPathHelper) {
  "use strict";

  var _exports = {};
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var convertTypes = MetaModelConverter.convertTypes;
  var createManifestWrapper = ManifestSettings.createManifestWrapper;

  /**
   * Checks whether an object is an annotation term.
   *
   * @param {string|AnnotationTerm<object>} vAnnotationPath
   * @returns {boolean}
   */
  var isAnnotationTerm = function (vAnnotationPath) {
    return typeof vAnnotationPath === "object";
  };

  var getDataModelPathForEntitySet = function (entitySet) {
    var dataModelPath = {
      startingEntitySet: entitySet,
      targetEntityType: entitySet.entityType,
      targetEntitySet: entitySet,
      navigationProperties: [],
      contextLocation: undefined,
      targetObject: entitySet
    };
    dataModelPath.contextLocation = dataModelPath;
    return dataModelPath;
  };
  /**
   * Create a ConverterContext object that will be used within the converters.
   *
   * @param {ConverterOutput} oConvertedTypes the converted annotation and service types
   * @param {BaseManifestSettings} oManifestSettings the manifestSettings that applies to this page
   * @param {TemplateType} templateType the type of template we're looking at right now
   * @param {IShellServicesProxy} shellServices the current instance of the shellservice
   * @param {IDiagnostics} diagnostics the diagnostics shim
   * @param {Function} mergeFn the function to be used to perfom some deep merges between object
   * @param {DataModelObjectPath} targetDataModelPath the global path to reach the entitySet
   *
   * @returns {ConverterContext} a converter context for the converters
   */


  function createConverterContext(oConvertedTypes, oManifestSettings, templateType, shellServices, diagnostics, mergeFn, targetDataModelPath) {
    var oManifestWrapper = createManifestWrapper(oManifestSettings, mergeFn);
    var sBaseContextPath = getTargetObjectPath(targetDataModelPath);

    var getEntityTypeFromFullyQualifiedName = function (fullyQualifiedName) {
      var targetEntityType = oConvertedTypes.entityTypes.find(function (entityType) {
        if (fullyQualifiedName.startsWith(entityType.fullyQualifiedName)) {
          var replaceAnnotation = fullyQualifiedName.replace(entityType.fullyQualifiedName, "");
          return replaceAnnotation.startsWith("/") || replaceAnnotation.startsWith("@");
        }

        return false;
      });
      return targetEntityType;
    };

    var getAnnotationEntityType = function (annotation) {
      if (annotation) {
        var annotationPath = annotation.fullyQualifiedName;
        var targetEntityType = getEntityTypeFromFullyQualifiedName(annotationPath);

        if (!targetEntityType) {
          throw new Error("Cannot find Entity Type for " + annotation.fullyQualifiedName);
        }

        return targetEntityType;
      } else {
        return targetDataModelPath.targetEntityType;
      }
    };

    var getManifestControlConfiguration = function (vAnnotationPath) {
      if (isAnnotationTerm(vAnnotationPath)) {
        return oManifestWrapper.getControlConfiguration(getRelativeAnnotationPath(vAnnotationPath.fullyQualifiedName, targetDataModelPath.targetEntityType));
      }

      return oManifestWrapper.getControlConfiguration(vAnnotationPath);
    };

    var getAbsoluteAnnotationPath = function (sAnnotationPath) {
      if (!sAnnotationPath) {
        return sAnnotationPath;
      }

      if (sAnnotationPath[0] === "/") {
        return sAnnotationPath;
      }

      return sBaseContextPath + "/" + sAnnotationPath;
    };

    var getEntitySet = function () {
      return targetDataModelPath.targetEntitySet;
    };

    var getDataModelObjectPath = function () {
      return targetDataModelPath;
    };

    var findEntitySet = function (entitySetName) {
      if (entitySetName === undefined) {
        return targetDataModelPath.targetEntitySet;
      }

      return oConvertedTypes.entitySets.find(function (entitySet) {
        return entitySet.name === entitySetName;
      });
    };

    var getEntitySetForEntityType = function (entityType) {
      return oConvertedTypes.entitySets.find(function (entitySet) {
        return entitySet.entityType === entityType;
      });
    };

    var getEntityType = function () {
      return targetDataModelPath.targetEntityType;
    };

    var getEntityPropertyFromFullyQualifiedName = function (fullyQualifiedName) {
      if (fullyQualifiedName) {
        var _targetEntityType$ent;

        var targetEntityType = getEntityTypeFromFullyQualifiedName(fullyQualifiedName);
        return targetEntityType === null || targetEntityType === void 0 ? void 0 : (_targetEntityType$ent = targetEntityType.entityProperties) === null || _targetEntityType$ent === void 0 ? void 0 : _targetEntityType$ent.find(function (propertyName) {
          return propertyName.name === fullyQualifiedName.split("/").pop();
        });
      }

      return undefined;
    };

    var getEntityTypeAnnotation = function (annotationPath) {
      if (annotationPath.indexOf("@") === -1) {
        annotationPath = "@" + annotationPath;
      }

      var targetObject = targetDataModelPath.targetEntityType.resolvePath(annotationPath, true);
      var rootEntitySet = targetDataModelPath.targetEntitySet;
      var currentEntityType = targetDataModelPath.targetEntityType;
      var navigationProperties = targetDataModelPath.navigationProperties.concat();
      var i = 1;
      var currentObject;
      var navigatedPaths = [];

      while (i < targetObject.visitedObjects.length) {
        currentObject = targetObject.visitedObjects[i++];

        if (currentObject._type === "NavigationProperty") {
          navigatedPaths.push(currentObject.name);
          navigationProperties.push(currentObject);
          currentEntityType = currentObject.targetType;

          if (rootEntitySet && rootEntitySet.navigationPropertyBinding.hasOwnProperty(navigatedPaths.join("/"))) {
            rootEntitySet = rootEntitySet.navigationPropertyBinding[currentObject.name];
            navigatedPaths = [];
          }
        }

        if (currentObject._type === "EntitySet") {
          rootEntitySet = currentObject;
          currentEntityType = rootEntitySet.entityType;
        }
      }

      var outDataModelPath = {
        startingEntitySet: targetDataModelPath.startingEntitySet,
        targetEntitySet: rootEntitySet,
        targetEntityType: currentEntityType,
        targetObject: navigationProperties[navigationProperties.length - 1],
        navigationProperties: navigationProperties,
        contextLocation: targetDataModelPath.contextLocation
      };
      return {
        annotation: targetObject.target,
        converterContext: createConverterContext(oConvertedTypes, oManifestSettings, templateType, shellServices, diagnostics, mergeFn, outDataModelPath)
      };
    };

    var getTemplateType = function () {
      return templateType;
    };

    var getRelativeAnnotationPath = function (annotationPath, entityType) {
      return annotationPath.replace(entityType.fullyQualifiedName, "");
    };

    var getEntitySetBasedAnnotationPath = function (annotationPath) {
      if (!annotationPath) {
        return annotationPath;
      }

      var entityTypeFQN = targetDataModelPath.targetEntityType.fullyQualifiedName;

      if (targetDataModelPath.targetEntitySet) {
        var replacedAnnotationPath = annotationPath.replace(entityTypeFQN, "/");

        if (replacedAnnotationPath.length > 2 && replacedAnnotationPath[0] === "/" && replacedAnnotationPath[1] === "/") {
          replacedAnnotationPath = replacedAnnotationPath.substr(1);
        }

        return sBaseContextPath + replacedAnnotationPath;
      } else {
        return "/" + annotationPath;
      }
    };

    var getManifestWrapper = function () {
      return oManifestWrapper;
    };

    var getShellServices = function () {
      return shellServices;
    };

    var getDiagnostics = function () {
      return diagnostics;
    };

    var getConverterContextFor = function (targetEntitySet) {
      var targetPath = getDataModelPathForEntitySet(targetEntitySet);
      return createConverterContext(oConvertedTypes, oManifestSettings, templateType, shellServices, diagnostics, mergeFn, targetPath);
    };

    var getAnnotationByType = function (vocabularyName, annotationTerm) {
      var entityType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getEntityType();
      var annotations = (entityType === null || entityType === void 0 ? void 0 : entityType.annotations[vocabularyName]) || {};
      var outAnnotations = [];

      if (annotations) {
        outAnnotations = Object.keys(annotations).filter(function (annotation) {
          return annotations[annotation].term === annotationTerm;
        }).reduce(function (previousValue, key) {
          previousValue.push(annotations[key]);
          return previousValue;
        }, []);
      }

      return outAnnotations;
    };

    var getEntityContainer = function () {
      return oConvertedTypes.entityContainer;
    };

    return {
      getAnnotationEntityType: getAnnotationEntityType,
      getManifestControlConfiguration: getManifestControlConfiguration,
      getAbsoluteAnnotationPath: getAbsoluteAnnotationPath,
      getEntitySet: getEntitySet,
      getDataModelObjectPath: getDataModelObjectPath,
      findEntitySet: findEntitySet,
      getEntitySetForEntityType: getEntitySetForEntityType,
      getEntityType: getEntityType,
      getEntityTypeAnnotation: getEntityTypeAnnotation,
      getTemplateType: getTemplateType,
      getRelativeAnnotationPath: getRelativeAnnotationPath,
      getEntitySetBasedAnnotationPath: getEntitySetBasedAnnotationPath,
      getManifestWrapper: getManifestWrapper,
      getShellServices: getShellServices,
      getDiagnostics: getDiagnostics,
      getConverterContextFor: getConverterContextFor,
      getEntityPropertyFromFullyQualifiedName: getEntityPropertyFromFullyQualifiedName,
      getAnnotationByType: getAnnotationByType,
      getEntityContainer: getEntityContainer
    };
  }
  /**
   * Create the converter context necessary for a macro based on a metamodel context.
   * @param sEntitySetName
   * @param oMetaModelContext
   * @param templateType
   * @param shellServices
   * @param diagnostics
   * @param mergeFn
   * @param targetDataModelPath
   * @param manifestSettings
   * @returns {ConverterContext} the current converter context
   */


  _exports.createConverterContext = createConverterContext;

  function createConverterContextForMacro(sEntitySetName, oMetaModelContext, templateType, shellServices, diagnostics, mergeFn, targetDataModelPath) {
    var manifestSettings = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};
    var oMetaModel = oMetaModelContext.isA("sap.ui.model.odata.v4.ODataMetaModel") ? oMetaModelContext : oMetaModelContext.getModel();
    var oConverterOutput = convertTypes(oMetaModel);
    var targetEntitySet = oConverterOutput.entitySets.find(function (entitySet) {
      return entitySet.name === sEntitySetName;
    });

    if (!targetDataModelPath) {
      targetDataModelPath = {
        startingEntitySet: targetEntitySet,
        navigationProperties: [],
        targetEntitySet: targetEntitySet,
        targetEntityType: targetEntitySet.entityType,
        targetObject: targetEntitySet
      };
    }

    return createConverterContext(oConverterOutput, manifestSettings, templateType, shellServices, diagnostics, mergeFn, targetDataModelPath);
  }

  _exports.createConverterContextForMacro = createConverterContextForMacro;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,