<core:FragmentDefinition
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns:smartlink="sap.ui.comp.navpopover"
	xmlns:dt="sap.ui.dt"
	template:require="sap.suite.ui.generic.template.changeHandler.js.AnnotationHelperForDesignTime"
	xmlns="sap.m" xmlns:sfo="sap.ui.comp.smartform" xmlns:l="sap.ui.layout"
	xmlns:core="sap.ui.core" xmlns:build="sap.build" xmlns:layout="sap.ui.layout">
	<!-- @classdesc @name: Name: sap.suite.ui.generic.template.fragments.SmartForm.fragment.xml
		@param {Collection(UI.Facet)} [facet] -->

	<sfo:SmartForm
			id="{:= ${parameter>/stableId}.getStableId({type: 'ObjectPageSection', subType: 'SmartForm', sFacet: ${facetId>id}, sIsPartOfPreview:  ${facet>com.sap.vocabularies.UI.v1.PartOfPreview/Bool}})}"
			editable="{ui>/editable}"
			class="sapSmartTemplatesSmartForm sapUxAPObjectPageSubSectionAlignContent"
			flexEnabled="true" validationMode="Async"
			entityType="{parts: [{path: 'facet>'}, {path: 'entitySet>'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getEntityTypesForFormPersonalization'}"
			build:metadta="#pattern:Form;">
		<sfo:semanticObjectController>
			<smartlink:SemanticObjectController beforePopoverOpens="._templateEventHandlers.onBeforeSemanticObjectLinkPopoverOpens"
												navigationTargetsObtained="._templateEventHandlers.onSemanticObjectLinkNavigationTargetObtained"
				                                beforeNavigationCallback="._templateEventHandlers.onBeforeSemanticObjectLinkNavigationCallback"
												forceLinkRendering="{parts: [{path: 'entitySet>'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.hasQuickViewFacet'}"/>
		</sfo:semanticObjectController>
		<sfo:customData>
			<core:CustomData key="defaultInputFieldDisplayBehaviour" value="descriptionAndId" />
			<core:CustomData key="defaultDropDownDisplayBehaviour" value="descriptionOnly" />
			<core:CustomData key="defaultTextInEditModeSource" value="ValueListNoValidation"/>
			<core:CustomData key="dateFormatSettings" value='\{"UTC":true,"style":"medium"\}' />
		</sfo:customData>
		<sfo:layout>
			<template:if test="{= ${appSettings>/useColumnLayoutForSmartForm} !== false}">
				<template:then>
					<sfo:ColumnLayout columnsM="2" columnsL="3" columnsXL="4" labelCellsLarge="12"/>
				</template:then>
				<template:else>
					<sfo:Layout columnsM="2" columnsL="3" columnsXL="4" labelSpanS="12" labelSpanM="12" labelSpanL="12" labelSpanXL="12" singleGroupFullSize="false" />
				</template:else>
			</template:if>
		</sfo:layout>
		<!--  apparantly superfluous
		seems to originally used to allow to "Set widths of mixed content in sections" by using UI adaptation - however this seems not to work anyway (no overlay, and also example in stta manage products does not work)
		
		if it should be needed, id generation should be adapted: 
		<sfo:layoutData>
			<layout:GridData id="{:= ${parameter>/stableId}.getStableId({type: 'ObjectPageSection', subType: 'GridData', sFacet: ${facetId>id}, sIsPartOfPreview:  ${facet>com.sap.vocabularies.UI.v1.PartOfPreview/Bool}})}"/>
		</sfo:layoutData> -->
		<template:with path="facet>" var="groupFacet">
			<!-- 	Reference Facet -->
			<template:with path="facet>Target" helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="target">
				<sfo:Group
						id="{:= ${parameter>/stableId}.getStableId({type: 'ObjectPageSection', subType: 'Group', sFacet: ${facetId>id}, sIsPartOfPreview:  ${facet>com.sap.vocabularies.UI.v1.PartOfPreview/Bool}})}"
						visible="{= ${path: 'facet>com.sap.vocabularies.UI.v1.Hidden'} ? ${path: 'facet>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getBindingForHiddenPath'} : true}"
						label="{= ${groupFacet>Label} ? ${path: 'groupFacet>Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'} : '' }"
						binding="{parts: [{path: 'facet>Target'}, {path: 'entitySet>'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getFormGroupBindingString'}">
					<template:if test="{target>Data}">
						<template:then>
							<template:repeat list="{target>Data}" var="dataField">
								<template:if test="{parts: [{path: 'entitySet>name'}, {path: 'groupFacet>'}, {path: 'manifestViewExtensions>'}, {path: 'dataField>'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.extensionPointReplaceSimpleHeaderFacetExists' }">
									<template:then>
										<sfo:GroupElement
											id="header::{path: 'groupFacet>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromDataField'}::ReplaceFGExtensionEdit"
											visible="{parts: [{path: 'entitySet>name'}, {path: 'groupFacet>'}, {path: 'manifestViewExtensions>'}, {path: 'dataField>'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getVisibilityForExtensionPointReplaceSimpleHeaderFacet' }">
											<core:ExtensionPoint name="ReplaceSimpleHeaderFacet|{entitySet>name}|{path: 'groupFacet>' , formatter:'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet'}::{path:'dataField>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromDataField'}" />
										</sfo:GroupElement>
									</template:then>
									<template:else>
										<template:if test="{= ${dataField>RecordType} !== 'com.sap.vocabularies.UI.v1.DataFieldForAction' &amp;&amp; ${dataField>RecordType} !== 'com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation'}">
											<core:Fragment fragmentName="sap.suite.ui.generic.template.fragments.SmartFormDataField" type="XML"/>
										</template:if>
									</template:else>
								</template:if>
							</template:repeat>
						</template:then>
						<template:elseif test="{= ${facet>Target/AnnotationPath}.indexOf('com.sap.vocabularies.UI.v1.DataPoint') > -1 }">
							<template:with path="facet>Target" helper="sap.ui.model.odata.AnnotationHelper.resolvePath"
											var="dataPoint">
								<template:if test="{parts: [{path: 'entitySet>name'}, {path: 'groupFacet>'}, {path: 'manifestViewExtensions>'}, {path: 'dataPoint>'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.extensionPointReplaceSimpleHeaderFacetExists' }">
									<template:then>
										<sfo:GroupElement
											id="header::{path: 'groupFacet>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet'}::{path: 'dataPoint>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromDataPoint'}::ReplaceDPExtensionEdit"
											visible="{parts: [{path: 'entitySet>name'}, {path: 'groupFacet>'}, {path: 'manifestViewExtensions>'}, {path: 'dataPoint>'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getVisibilityForExtensionPointReplaceSimpleHeaderFacet' }">
											<core:ExtensionPoint name="ReplaceSimpleHeaderFacet|{entitySet>name}|{path: 'groupFacet>' , formatter:'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet'}::{path:'dataPoint>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromDataPoint'}"/>
										</sfo:GroupElement>
									</template:then>
									<template:else>
										<core:Fragment fragmentName="sap.suite.ui.generic.template.fragments.SmartFormDataField" type="XML"/>
									</template:else>
								</template:if>
							</template:with>
						</template:elseif>
						<template:else>
							<template:repeat list="{target>}" var="dataField">
								<template:if test="{parts: [{path: 'entitySet>name'}, {path: 'groupFacet>'}, {path: 'manifestViewExtensions>'}, {path: 'dataField>'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.extensionPointReplaceSimpleHeaderFacetExists' }">
									<template:then>
										<sfo:GroupElement
											id="header::{path: 'groupFacet>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromDataField'}::ReplaceIdentificationExtensionEdit"
											visible="{parts: [{path: 'entitySet>name'}, {path: 'groupFacet>'}, {path: 'manifestViewExtensions>'}, {path: 'dataField>'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getVisibilityForExtensionPointReplaceSimpleHeaderFacet' }">
											<core:ExtensionPoint name="ReplaceSimpleHeaderFacet|{entitySet>name}|{path: 'groupFacet>' , formatter:'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet'}::{path:'dataField>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromDataField'}" />
										</sfo:GroupElement>
									</template:then>
									<template:else>
										<template:if test="{= ${dataField>RecordType} !== 'com.sap.vocabularies.UI.v1.DataFieldForAction' &amp;&amp; ${dataField>RecordType} !== 'com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation'}">
											<core:Fragment fragmentName="sap.suite.ui.generic.template.fragments.SmartFormDataField" type="XML"/>
										</template:if>
									</template:else>
								</template:if>
							</template:repeat>
						</template:else>
					</template:if>
					<template:if test="{= ${groupFacet>Target/AnnotationPath} }">
						<template:then>
							<core:ExtensionPoint
								name="SmartFormExtension|{entitySet>name}|{path: 'groupFacet>', formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet'}" />
						</template:then>
					</template:if>
				</sfo:Group>
			</template:with>
		</template:with>
	</sfo:SmartForm>
</core:FragmentDefinition>
